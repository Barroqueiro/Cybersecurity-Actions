name: 'Cybersecurity Actions'
author: 'Dinis Cruz'
description: 'Run a type of reporting on your repository'
inputs:
  scan-type:
    descripton: 'Type of scan to run [ Container Scan (CS), Bad Practices (BP), Vulnerability Scan (VS), Secret Scan (SS) ]'
    required: true
  build-script: 
    description: 'Script used to build the image'
    default: ''
  image-tag:
    description: 'Tag by which we can identify the image'
    default: ''
  prosp-filepath:
    description: 'Path within the scanned repository where the prospector profile file is'
    default: ''
  prosp-cmd:
    description: 'Aditional command line arguments to be passed to prospector'
    default: ''
  radon-cmd:
    description: 'Aditional command line arguments to be passed to radon'
    default: ''
  files-toscan:
    description: 'Files to perform Bad Practices on'
    deafult: ''
  bp-isblocking:
    description: 'Fail the workflow if the Bad Practices Scan finds any problems'
    default: 'true'
  horusec-filepath:
    description: 'Path within the scanned repository where the horusec config file is'
    default: ''
  horusec-cmd:
    description: 'Aditional command line arguments to be passed to horusec'
    default: ''
  vs-isblocking:
    description: 'Fail the workflow if the Vulnerability Scan finds vulnerabilities'
    default: 'true'
  gitleaks-cmd:
    description: 'Additional command line arguments to be passed to gitleaks'
    default: ''
  secrets-filepath:
    description: 'File containing the hashes of secrets to ignore during gitleaks run'
    default: ''
  ss-isblocking:
    description: 'Fail the workflow if the Secrets Scan finds secrets not accepted'
    default: 'true'
  dockle-filepath:
    description: 'Path within the scanned repository where the dockle ignore file is'
    default: ''
  dockle-cmd:
    description: 'Aditional command line arguments to be passed to dockle'
    default: ''
  ds-isblocking:
    description: 'Fail the workflow if the Dockle Scan finds vulnerabilities'
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Entrypoint
      run: >
            ${{ github.action_path }}/entrypoint.sh 
            --action-path ${{ github.action_path }}
            --repo-name ${{ github.event.repository.name }}
            --scan-type ${{ inputs.scan-type }}
            --build-script ${{ github.build-script }}
            --image-tag ${{ github.image-tag }}
            --prosp-filepath ${{ inputs.prosp-filepath }}
            --prosp-cmd ${{ inputs.prosp-cmd }}
            --radon-cmd ${{ inputs.radon-cmd }}
            --files-toscan ${{ inputs.files-toscan }}
            --bp-isblocking ${{ inputs.bp-isblocking }}
            --horusec-filepath ${{ inputs.horusec-filepath }}
            --horusec-cmd ${{ inputs.horusec-cmd }}
            --vs-isblocking ${{ inputs.vs-isblocking }}
            --secrets-filepath ${{ inputs.secrets-filepath }}
            --gitleaks-cmd ${{ inputs.gitleaks-cmd }}
            --ss-isblocking ${{ inputs.ss-isblocking }}
            --dockle-filepath ${{ inputs.dockle-filepath }}
            --dockle-cmd ${{ inputs.dockle-cmd }}
            --ds-isblocking ${{ inputs.ds-isblocking }}
      shell: bash
    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v1.0.0
      with:
        name: Reports
        path: Reports/
